// datasource db {
//   provider = "sqlite"
//   url      = env("DATABASE_URL")
// }


generator client {
  provider = "prisma-client-js"
}


// generator client {
//   provider        = "prisma-client-js"
//   binaryTargets   = ["native", "debian-openssl-3.0.x", "linux-arm64-openssl-1.1.x", "rhel-openssl-3.0.x"]
// }

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  // id               String  @id @default(cuid())
  id                 String  @id @default(auto()) @map("_id") @db.ObjectId
  // userId             String
  userId            String  @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  // id           String   @id @default(cuid())
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  // userId       String
  userId       String   @db.ObjectId
  eexpires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  // id            String    @id @default(cuid())
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  // identifier String
  identifier String   @id @default(auto()) @map("_id") @db.ObjectId
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
